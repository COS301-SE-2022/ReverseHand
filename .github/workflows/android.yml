name: Test and Analyse

on:
  workflow_call:
    inputs:
      test:
        description: 'Type of test being run'
        required: true
        type: string
      testType:
        description: 'Type of test (analyze, test)'
        required: false
        type: string

jobs:
  test:
    name: Unit and Widget Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        api-level: [29]

    steps:
    #Checking out to develop branch
      - name: Checking Out Develop
        uses: actions/checkout@v1
        with:
          fetch-depth: 0

    #Generates the hashes for the comparison between the origin branch and the upstream development branch
      - name: Derive appropriate SHAs for base and head for `nx affected` commands
        uses: nrwl/nx-set-shas@v2
        with:
          main-branch-name: 'develop'
    
    #Installs node.js
      - name: Use Node.js 16
        uses: actions/setup-node@v2
        with:
          node-version: '16'
      - run: npm install

    #cache the node modules
      - name: Cache dependencies for node
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: npm-${{ hashFiles('package-lock.json') }}
          restore-keys: npm-

      - name: Install dependencies
        run: npm ci --ignore-scripts


    #Flutter Action needs java
      - name: Installing java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '8'

    #Caching Flutter dependencies
      - name: Cache Flutter dependencies
        uses: actions/cache@v2
        with:
          path: /opt/hostedtoolcache/flutter
          key: ${{ runner.OS }}-flutter-install-cache-${{ env.flutter_version }}

    #Including the Flutter action
      - name: Setup flutter
        uses: subosito/flutter-action@v1
        with: 
          channel: stable
          flutter-version: ${{ env.flutter_version }}
    #Try to execute tests
      - name: Test affected
        if: inputs.test == 'affected' && inputs.testType == 'test'
        run: npx affected --target=test --base=${{ env.NX_BASE }} --head=${{ env.NX_HEAD }}

    #Try to analyze code
      - name: Analyze affected
        if: inputs.test == 'affected' && inputs.testType == 'analyze'
        run: npx affected --target=analyze --base=${{ env.NX_BASE }} --head=${{ env.NX_HEAD }}
   
    #Test all which uses no cache
      - name: Execute tests
        if: inputs.test == 'all'
        run: npx nx run-many --target=test --all --skip-nx-cache --parallel
        #Amplify excluded from analyze as flutter has issues with the way amplify generates models
        #and since the models are auto generated they should not be changed

    #Call the script to assist CodeCov with showing accurate coverage
      - name: Run tests only to generate coverage with help of bash script
        if: inputs.test == 'coverage'
        run: |
          node execute_script.js
          npx nx run-many --target=test --all --skip-nx-cache --parallel

    #merge the lcov files
      - name: Merge codecov reports
        if: inputs.test == 'coverage'
        run: node merge-reports.js

    #send merged file to codecov
      - uses: codecov/codecov-action@v2
        if: inputs.test == 'coverage' 
        with:
          # Organization codecov token to be placed below
          token: ${{ secrets.CODECOV_TOKEN }}
          files: lcov.info

  analyze: #job for linting
    name: Analyze Code
    runs-on: ubuntu-latest
    strategy:
      matrix:
        api-level: [29]

    steps:
    #Checking out to develop branch
      - name: Checking Out Develop
        uses: actions/checkout@v1
        with:
          fetch-depth: 0

    #Generates the hashes for the comparison between the origin branch and the upstream development branch
      - name: Derive appropriate SHAs for base and head for `nx affected` commands
        uses: nrwl/nx-set-shas@v2
        with:
          main-branch-name: 'develop'
    
    #Installs node.js
      - name: Use Node.js 16
        uses: actions/setup-node@v2
        with:
          node-version: '16'
      - run: npm install

    #cache the node modules
      - name: Cache dependencies for node
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: npm-${{ hashFiles('package-lock.json') }}
          restore-keys: npm-

      - name: Install dependencies
        run: npm ci --ignore-scripts


    #Flutter Action needs java
      - name: Installing java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '8'

    #Caching Flutter dependencies
      - name: Cache Flutter dependencies
        uses: actions/cache@v2
        with:
          path: /opt/hostedtoolcache/flutter
          key: ${{ runner.OS }}-flutter-install-cache-${{ env.flutter_version }}

    #Including the Flutter action
      - name: Setup flutter
        uses: subosito/flutter-action@v1
        with: 
          channel: stable
          flutter-version: ${{ env.flutter_version }}

    #Analyze all which uses no cache
      - name: Analyze
        if: inputs.test == 'all'
        run: npx nx run-many --target=analyze --all --skip-nx-cache --parallel --exclude=amplify
        #Amplify excluded from analyze as flutter has issues with the way amplify generates models
        #and since the models are auto generated they should not be changed

  Integration_test:
    name: Integration test
    runs-on: macos-latest
    strategy:
      matrix:
        api-level: [29]

    steps:
    #Checking out to develop branch
      - name: Checking Out Develop
        uses: actions/checkout@v1
        with:
          fetch-depth: 0

    #Generates the hashes for the comparison between the origin branch and the upstream development branch
      - name: Derive appropriate SHAs for base and head for `nx affected` commands
        uses: nrwl/nx-set-shas@v2
        with:
          main-branch-name: 'develop'
    
    #Installs node.js
      - name: Use Node.js 16
        uses: actions/setup-node@v2
        with:
          node-version: '16'
      - run: npm install

    #cache the node modules
      - name: Cache dependencies for node
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: npm-${{ hashFiles('package-lock.json') }}
          restore-keys: npm-

      - name: Install dependencies
        run: npm ci --ignore-scripts


    #Flutter Action needs java
      - name: Installing java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '8'

    #Caching Flutter dependencies
      - name: Cache Flutter dependencies
        uses: actions/cache@v2
        with:
          path: /opt/hostedtoolcache/flutter
          key: ${{ runner.OS }}-flutter-install-cache-${{ env.flutter_version }}

    #Including the Flutter action
      - name: Setup flutter
        uses: subosito/flutter-action@v2
        with: 
          channel: stable
          flutter-version: '3.0.4' #have to manually put version else error

    #cache the AVD to speed  up workflow
      - name: AVD cache
        uses: actions/cache@v2
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-${{ matrix.api-level }}

      - name: create AVD and generate snapshot for caching
        if: steps.avd-cache.outputs.cache-hit != 'true'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          force-avd-creation: false
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: false
          script: echo "Generated AVD snapshot for caching."
      - name: Execute integration tests
        if: inputs.test == 'all' && inputs.test == 'affected' #remove inputs.test == 'affected' later
        uses: reactivecircus/android-emulator-runner@v2
        with: 
          api-level: 29
          profile: Nexus 6
          script: npx nx run-many --target=integrationTest --all --skip-nx-cache --parallel
     


     
